; Simple test of IO functions
; Does echo of user input on keyboard, and writes to a new line
;
#include "BareBonesOS/src/bbos.inc.asm"
#include "macros.dasm.inc"

; Modes of operation
.def EXAM  0   ; Show the value at last_address
.def BEXAM 1   ; Shot the valus from last_address to another address
.def WRITE 2   ; Writes values from last_address

.def CR    0x11
.def DEL   0x10

.org 0
monitor_entry:
        set [buffer_size], 0
        set [last_address], 0x01FF
        set [mode], EXAM

monitor_get_input:
        jsr line_feed
        jsr print_prompt

monitor_get_char_loop:
        jsr getchar     ; A now, have keyboard key
        ife a, CR
            set pc, monitor_parse
        ife a, DEL
            set pc, monitor_del

        ; Hexadecimal input
        ifg a, 0x60 ; >= 'a'
            ifl a, 0x67 ;<= f
                set pc, monitor_putbuffer
        ifg a, 0x2F ; >= '0'
            ifl a, 0x3A ; <= '9'
                set pc, monitor_putbuffer

        ; Separator
        ife a, 0x20
            set pc, monitor_putbuffer
        ; Change mode
        ife a, '.'      ; List block
            set pc, monitor_putbuffer
        ife a, 0x3A ;':'      ; Put data
            set pc, monitor_putbuffer

        ; Run command
        ife a, 0x72 ; 'r'
            set pc, monitor_putbuffer

        set pc, monitor_get_char_loop   ; Ignores the rest of input

monitor_putbuffer:
        set b, [buffer_size]            ; Read the counter
        set [buffer + b], a             ; Put the character on the buffer
        add b, 1                        ; Increment the counter
        set [buffer_size], b            ; Store the counter
        jsr putc                        ; And echo the character

        set pc, monitor_get_char_loop   ; and grab next input

monitor_del:
        ife [buffer_size], 0
            set pc, monitor_get_char_loop   ; Nothing to delete
        sub [buffer_size], 1
        ; Now to repositionate the cursor, and delete the echo
        jsr backspace
        set pc, monitor_get_char_loop   ; and grab next input

monitor_parse:
        ; We are to use:
        ; Y as indicator that a new address was put
        ; Z as store of parsed values
        ; I as index on buffer
        ; A value read from buffer
        set y, 0
        set z, 0
        set i, 0
monitor_parse_loop:         ; Here parses the buffer
        ife i, [buffer_size]
            set pc, monitor_parse_endloop

        set a, [buffer + i]     ; Grab next character to parse
        add i, 1                ; And increment index

        ; TODO Parse commands here
        ife a, 0x20 ; ' '
            set pc, monitor_new_laddress

        ife a, 0x2E ; '.'
            ife [mode], EXAM
                set pc, monitor_chmod_bexam ; Switch to Block EXAMination

        ; Parse hex value
        ifg a, 0x60 ; >= 'a'
            ifl a, 0x67 ;<= f
                set pc, monitor_val_hex_letter
        ifg a, 0x2F ; >= '0'
            ifl a, 0x3A ; <= '9'
                set pc, monitor_val_hdigit

        set pc, monitor_parse_loop

monitor_parse_endloop:
        ife [mode], EXAM                ; if on EXAM mode
            ifn y, 0                    ; and there was an input
                set [last_address], z   ; store last address new value

        ife [mode], BEXAM
            set pc, monitor_parse_bexam ; Go to BEXAM mode code

        ; TODO if X mode go to ....

monitor_parse_exam:
        jsr monitor_print_laddress

monitor_parse_end:                      ; Common code that ends the parse loop
        set [buffer_size], 0
        set [mode], EXAM
        set pc, monitor_get_input   ; and grab next input

monitor_val_hdigit:                     ; Parse Hex [0-9] digit
        shl z, 4    ; Z << 4 as we put the value on the 4 LSBits
        sub a, 0x30 ; 0
        bor z, a    ; z = z or (a-'0')

        set y, 1
        set pc, monitor_parse_loop
monitor_val_hex_letter:                 ; Parse Hex [a-f] digit
        shl z, 4    ; Z << 4 as we put the value on the 4 LSBits
        sub a, 0x57 ; 'a' - 0x0A = 0x57
        bor z, a    ; z = z or (a-0x57)

        set y, 1
        set pc, monitor_parse_loop

monitor_new_laddress:                   ; Replace last_address and print it
        ife [mode], EXAM                ; if on EXAM mode
            ifn y, 0                    ; and there was an input
                set [last_address], z   ; store last address new value

        jsr monitor_print_laddress

        set z, 0    ; Clears temporal value
        set y, 0    ; Clears flag of a new laddress
        set pc, monitor_parse_loop

monitor_print_laddress:                 ; Prints pair addrress:value
        ; 1 - print address
        set a, [last_address]
        jsr monitor_print_address

        ; 2 - print value at address last_address
        set a, [last_address]
        set a, [a]
        jsr print_uhexword

        set pc, pop

monitor_print_address_bexam:            ; Called on BEXAM mode to print address
        set a, [last_address]
        add a, b
monitor_print_address:                  ; Print an address on A register
        jsr line_feed                   ; on the Next line
        ; print address
        jsr print_uhexword
        set a, ':'
        jsr putc
        set pc, pop

monitor_chmod_bexam:                    ; Set mode to block examine
        ife [mode], EXAM                ; if on EXAM mode
            ifn y, 0                    ; and there was an input
                set [last_address], z   ; store last address new value

        set z, 0    ; Clear temporal var
        set [mode], BEXAM

        set pc, monitor_parse_loop

monitor_chmod_write:                    ; Set mode to write mode
        ife [mode], EXAM                ; if on EXAM mode
            ifn y, 0                    ; and there was an input
                set [last_address], z   ; store last address new value

        set z, 0    ; Clear temporal var
        set [mode], WRITE

        set pc, monitor_parse_loop

monitor_parse_bexam:                    ; Write a range of values
        ifl z, [last_address]           ; Invalid adress range
            set pc, monitor_parse_exam
        ife z, [last_address]           ; Invalid adress range
            set pc, monitor_parse_exam

        set b, 0
monitor_parse_bexam_for:                ; for (b=0; b<=(z-last_address) ; b++)
        set a, z
        sub a, [last_address]
        ifg b, a
            set pc, monitor_parse_bexam_forend

        ;ifc b, 0x0003   ; if b & 0b0000_0011 == 0
        ;    jsr line_feed
        ifc b, 0x0003   ; if b & 0b0000_0011 == 0
            jsr monitor_print_address_bexam
            ; TODO print address last_address + b

        set a, 0x20   ; ' '
        jsr putc

        ; print value at address last_address
        set a, [last_address]
        add a, b
        set a, [a]  ; a= [[last_adress]+b]
        jsr print_uhexword

        add b,1
        set pc, monitor_parse_bexam_for

monitor_parse_bexam_forend:
        set pc, monitor_parse_end

#include "io_functions.dasm.inc"

end_program: .dat 0

; We use .fill to emplace boot magic number
.fill 0, 0x1FE - end_program
.dat 0x55AA     ; Magic number

; Variables
last_address:   .reserve 1
mode:           .reserve 1

buffer_size:    .reserve 1
buffer:         .reserve 1

; vim: set ts=4 sw=4 tw=0 et :
